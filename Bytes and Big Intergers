This part requires the use of functions bytes_to_long and long_to_bytes from Crypto.Util.number. Before proceeding with this exercise, we should ensure there are no issues with this part.

Now we have an example:

message: HELLO
ascii bytes: [72, 69, 76, 76, 79]
hex bytes: [0x48, 0x45, 0x4c, 0x4c, 0x4f]
base-16: 0x48454c4c4f
base-10: 310400273487
This example demonstrates how to take the ordinal bytes of the message, convert them into hexadecimal, and concatenate them. This can be interpreted as a base-16/hexadecimal number and also represented in base-10/decimal.

Now, the question:

Convert the following integer back into a message:


11515195063862318899931685488813747395775516287289682636499965282714637259206269
Answer:


from Crypto.Util.number import bytes_to_long
from Crypto.Util.number import long_to_bytes

byte = 11515195063862318899931685488813747395775516287289682636499965282714637259206269
flag = long_to_bytes(byte)
print(flag)
Output: b'crypto{3nc0d1n6_4ll_7h3_w4y_d0wn}'
